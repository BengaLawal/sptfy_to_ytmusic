name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
      fail-fast: false  # Continue with other versions if one fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enable pip caching

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Find and install all requirements files
          echo "üîç Finding all requirements files..."
          find . -type f -name "requirements*.txt" -not -path "*/\.*" | while read file; do
            echo "üì¶ Installing dependencies from: $file"
            pip install -r "$file"
          done

          # Install common test dependencies
          echo "üß™ Installing test dependencies..."
          pip install pytest pytest-cov pytest-mock pytest-asyncio

          # List all installed packages
          echo "üìã Installed packages:"
          pip list      

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black . --check
          isort . --check-only --profile black

      - name: Run tests with coverage
        run: |
          pytest --cov=./ --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run security checks
        run: |
          bandit -r . -c pyproject.toml
          safety check

env:
  PYTHONPATH: ${{ github.workspace }}
  FORCE_COLOR: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
