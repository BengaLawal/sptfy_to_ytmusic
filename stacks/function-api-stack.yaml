AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Function and Api Stack for Spotify to YT Music

Globals:
  Function:
    Runtime: python3.12
    MemorySize: 3008
    Timeout: 30
    Tracing: Active
    Tags:
      Application: SpotifyToYTMusic

Parameters:
  Env:
    Type: String
  UserPoolId:
    Type: String
    Description: The Cognito User Pool id
  UserPoolClientId:
    Type: String
    Description: The Cognito User Pool Client ID
  UsersPoolArn:
    Type: String
    Description: The Cognito User Pool arn
  UserPoolAdminGroupName:
    Type: String
    Description: The Cognito User Pool Admin Group Name
    Default: spotify-to-yt-music-admins
  UsersTable:
    Type: String
    Description: The DynamoDB table name for users
  UsersTableArn:
    Type: String
    Description: The DynamoDB table ARN for users


Resources:
  OnCognitoSignupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UsersFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Ref UsersPoolArn

  SpotifyToYtMusicApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: SpotifyToYtMusicApi
      TracingEnabled: True
      Cors:
        AllowMethods: "'OPTIONS, POST, GET, PUT, DELETE'"
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'"
        AllowOrigin: "'http://localhost:5173'"
        AllowCredentials: "'true'"
        MaxAge: "'3600'"
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
                - AuthorizerFunction
                - Arn
            Identity:
              Headers:
                - Authorization
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
            - AccessLogs
            - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol", "integrationStatus":
          $context.integrationStatus, "integrationLatency": $context.integrationLatency,
          "responseLength":"$context.responseLength" }'
      MethodSettings:
        - ResourcePath: /*
          LoggingLevel: INFO
          HttpMethod: '*'
          DataTraceEnabled: true

  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccountLoggingSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - ApiLoggingRole
          - Arn

  AccessLogs:
    Type: AWS::Logs::LogGroup
    DependsOn: ApiLoggingRole
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/APIAccessLogs

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../users/src/api
      Handler: authorizer.lambda_handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPoolId
          APPLICATION_CLIENT_ID:
            Ref: UserPoolClientId
          ADMIN_GROUP_NAME:
            Ref: UserPoolAdminGroupName
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handler for all users related operations
      CodeUri: ../users/src/api
      Handler: users.lambda_handler
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          USERS_TABLE_ARN: !Ref UsersTableArn
          REGION: !Ref AWS::Region
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Tags:
        Stack: !Sub ${AWS::StackName}
      Events:
        GetUsersEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref SpotifyToYtMusicApi
        PutUserEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref SpotifyToYtMusicApi
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: put
            RestApiId: !Ref SpotifyToYtMusicApi
        GetUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: get
            RestApiId: !Ref SpotifyToYtMusicApi
        DeleteUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: delete
            RestApiId: !Ref SpotifyToYtMusicApi

  UsersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName:
        !Sub /aws/lambda/${UsersFunction}

  SpotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../spotify/src/api
      Handler: spotify.lambda_handler
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:Spotify-*"
      Events:
        IsLoggedIn: # Event for the isLoggedIn path
          Type: Api
          Properties:
            Path: /spotify/isLoggedIn/{userId}
            Method: get
            RestApiId: !Ref SpotifyToYtMusicApi
        OptionsIsLoggedIn:
          Type: Api
          Properties:
            Path: /spotify/isLoggedIn/{userId}
            Method: options
            RestApiId: !Ref SpotifyToYtMusicApi
            Auth:
              Authorizer: NONE
        Login: # Event for the login path
          Type: Api
          Properties:
            Path: /spotify/login/{userId}
            Method: get
            RestApiId: !Ref SpotifyToYtMusicApi
        OptionsLogin:
          Type: Api
          Properties:
            Path: /spotify/login/{userId}
            Method: options
            RestApiId: !Ref SpotifyToYtMusicApi
            Auth:
              Authorizer: NONE
        SpotifyCallback:  # Event for handling spotify callback
          Type: Api
          Properties:
            Path: /spotify/callback
            Method: post
            RestApiId: !Ref SpotifyToYtMusicApi
        OptionsSpotifyCallback:
          Type: Api
          Properties:
            Path: /spotify/callback
            Method: options
            RestApiId: !Ref SpotifyToYtMusicApi
            Auth:
              Authorizer: NONE
        GetPlaylists: # Event for getting playlists & ids
          Type: Api
          Properties:
            Path: /spotify/playlists/{userId}
            Method: get
            RestApiId: !Ref SpotifyToYtMusicApi
        OptionsPlaylists:
          Type: Api
          Properties:
            Path: /spotify/playlists/{userId}
            Method: options
            RestApiId: !Ref SpotifyToYtMusicApi
            Auth:
              Authorizer: NONE

  YtMusicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../ytmusic/src/api
      Handler: ytmusic.lambda_handler
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:YtMusic-*"
      Events:
#        IsLoggedIn: # Event for the isLoggedIn path
#          Type: Api
#          Properties:
#            Path: /ytmusic/isLoggedIn/{userId}
#            Method: get
#            RestApiId: !Ref SpotifyToYtMusicApi
#        OptionsIsLoggedIn:
#          Type: Api
#          Properties:
#            Path: /ytmusic/isLoggedIn/{userId}
#            Method: options
#            RestApiId: !Ref SpotifyToYtMusicApi
#            Auth:
#              Authorizer: NONE
        Login: # Event for the login path
          Type: Api
          Properties:
            Path: /ytmusic/login/{userId}
            Method: get
            RestApiId: !Ref SpotifyToYtMusicApi
        OptionsLogin:
          Type: Api
          Properties:
            Path: /ytmusic/login/{userId}
            Method: options
            RestApiId: !Ref SpotifyToYtMusicApi
            Auth:
              Authorizer: NONE
        YtMusicPoll: # Event for handling ytmusic poll token
          Type: Api
          Properties:
            Path: /ytmusic/poll-token
            Method: post
            RestApiId: !Ref SpotifyToYtMusicApi
        OptionsYtMusicPoll:
          Type: Api
          Properties:
            Path: /ytmusic/poll-token
            Method: options
            RestApiId: !Ref SpotifyToYtMusicApi
            Auth:
              Authorizer: NONE


  YtMusicFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName:
        !Sub /aws/lambda/${YtMusicFunction}

#  SpotifyFunctionLogGroup:
#    Type: AWS::Logs::LogGroup
#    DeletionPolicy: Retain
#    UpdateReplacePolicy: Retain
#    Properties:
#      LogGroupName:
#        !Sub /aws/lambda/${SpotifyFunction}


Outputs:
  SpotifyToYtMusicApi:
    Description: URL of the API Gateway
    Value: !Sub "https://${SpotifyToYtMusicApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"

  SpotifyToYtMusicApiId:
    Description: The ID of the API Gateway
    Value: !Ref SpotifyToYtMusicApi

  UsersFunctionArn:
    Description: ARN of the Users Lambda function
    Value: !GetAtt UsersFunction.Arn

  SpotifyFunctionArn:
    Description: ARN of the Spotify Lambda function
    Value: !GetAtt SpotifyFunction.Arn