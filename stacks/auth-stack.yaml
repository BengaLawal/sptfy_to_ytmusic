AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Authentication Stack for Spotify to YT Music

Parameters:
  Env:
    Type: String
  UserPoolAdminGroupName:
    Type: String
#  UsersFunctionArn:
#    Type: String

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Env}-User Pool"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

      UserPoolTags:
        Key: Name
        Value: !Sub "${Env} UserPool"
#      LambdaConfig:
#        PostConfirmation: !Ref UsersFunctionArn

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${Env}UserPoolClient"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: 'hours'
        IdToken: 'hours'
        RefreshToken: 'days'
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:8888/callback  # frontend URL
        - http://localhost
      LogoutURLs:
        - http://localhost:8888  # frontend URL
        - http://localhost
      DefaultRedirectURI: http://localhost:8888

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool

  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: !Ref UserPoolAdminGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${Env}-IdentityPool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true

  # IAM roles for authenticated and unauthenticated users
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: AuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                  - cognito-idp:ConfirmSignUp
                  - cognito-idp:InitiateAuth
                  - cognito-idp:RespondToAuthChallenge
                Resource: !GetAtt UserPool.Arn

  # Attach roles to the Identity Pool
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

Outputs:
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref UserPool

  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient

  UserPoolArn:
    Description: ARN of the Cognito User Pool
    Value: !GetAtt UserPool.Arn

  UserPoolAdminGroupName:
    Description: Name of the Cognito User Pool Admin Group
    Value: !Ref UserPoolAdminGroupName

  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value:
      Fn::Sub: "https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost"

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value:
      Fn::Sub: "aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id
        ${UserPoolClient} --auth-parameters USERNAME=<user@example.com>,PASSWORD=<password>
        --query 'AuthenticationResult.IdToken' --output text"

  IdentityPoolId:
    Description: ID of the Cognito Identity Pool
    Value: !Ref IdentityPool